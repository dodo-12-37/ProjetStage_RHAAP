---
# Modifié à partir de : https://github.com/gregsowell/ansible-builder/blob/main/build-ee.yml
#
# Commande d'exécution :
# ansible-playbook build-ee.yml --ask-vault-pass
#

- name: Build/Push/Install Custom EEs
  hosts: controllerHost.local
  become: true
  gather_facts: false

  vars_files:
    - credentials.yml  # Contient le mot de passe pour déchiffrer le fichier vault
  
  vars:
    # debug: Si 'true', afficher les ansible.builtin.debug
    debug: false

    # aap username/pass
    controller_user: "{{ vault_controller_user }}"
    controller_pass: "{{ vault_controller_password }}"

    # pah username/pass
    pah_user: "{{ vault_pah_user }}"
    pah_pass: "{{ vault_pah_password }}"
    # private automation hub host
    pah_host: privateHubHost.local
    # credential name used in AAP
    pah_cred: Automation Hub Container Registry

    # what is the name of the new EE being built. Repository name should be lowercasse.
    new_ee: vdq_default_ee
    # new version number for the pushed ee
    new_ee_ver: 1.0.0

    # what is the base EE that is used for building my custom EE
    base_ee: registry.redhat.io/ansible-automation-platform-21/ee-supported-rhel8
    # ee repo
    ee_repo: https://vdq@dev.azure.com/vdq/RHAAP/_git/ManageEE_VDQ
    ee_name_repo: "{{ ee_repo | regex_search('/_git/([A-Za-z0-9_-]+)$') | replace('/_git/', '') }}"

    # what is the path where the EE build files are stored
    # path_to_ee_inside_repo: "{{ base_ee_path }}/{{ ee_name_repo }}/ansible-execution-environments/{{ new_ee }}"
    path_to_ee_inside_repo: "{{ base_ee_path }}/ansible-execution-environments/{{ new_ee }}"
    # base folder for cloning EE
    # base_ee_path: /home/test/AzureRepos
    base_ee_path: "{{ playbook_directory }}"

    # garbage_collection: Permet de supprimer toutes les images présentes en local si 'true'
    garbage_collection: true


  tasks:
    - name: Enregistrer le répertoire du playbook
      ansible.builtin.set_fact:
        playbook_directory: "{{ playbook_dir }}"

    - name: Afficher le répertoire du playbook
      when: debug == true
      ansible.builtin.debug:
        var: playbook_directory

    - name: Debug ee_name_repo
      when: debug == true
      ansible.builtin.debug:
        var: ee_name_repo

    - name: Garbage Collection
      # when: garbage_collection is defined
      when: garbage_collection is true
      block:
        - name: List out if there are any hanging containers
          ansible.builtin.shell: df -h | grep /var/lib/containers/sttaskge/overlay/
          register: overlays

        - name: Print out overlays
          when: debug == true
          ansible.builtin.debug:
            var: overlays

    - name: Podman garbage collection on any old containers *will clear out most contianers*
      # when: garbage_collection is defined
      when: garbage_collection is true
      ansible.builtin.shell: sudo podman groupestem prune -a -f
      # changed_when: false

    - name: Check if the folder exists or not
      ansible.builtin.stat:
        path: "{{ base_ee_path }}"
      register: path_exist

    - name: Debug path_exist
      when: debug == true
      ansible.builtin.debug:
        var: path_exist

    - name: Git clone the EE repo to ensure I have the newest files
      when: path_exist.stat.islnk is not defined
      ansible.builtin.shell: "git clone {{ ee_repo }}"
      args:
        chdir: "{{ base_ee_path }}/.."

    - name: Git pull the EE repo to ensure I have the newest files
      when: path_exist.stat.islnk is defined
      ansible.builtin.shell: "git pull"
      args:
        # chdir: "{{ base_ee_path }}/{{ ee_name_repo }}"
        chdir: "{{ base_ee_path }}"

    - name: Include the EE file as variables
      include_vars:
        # file: "{{ base_ee_path }}/{{ ee_name_repo }}/ansible-execution-environments/{{ new_ee }}/execution-environment.yml"
        file: "{{ path_to_ee_inside_repo }}/execution-environment.yml"
        name: inc_vars

    - name: Debug inc_vars
      when: debug == true
      ansible.builtin.debug:
        var: inc_vars

    # - name: Setup some base variables
    #   ansible.builtin.set_fact:
    #     # base_ee: "{{ inc_vars.build_arg_defaults.EE_BASE_IMAGE }}"
    #     base_ee: "{{ inc_vars.images.base_image.name }}"
    #     new_ee_ver: "{{ inc_vars.version }}"

    - name: Grab the list of EEs to ensure the correct EE exists
      ansible.builtin.shell: podman image list
      changed_when: false
      register: ee_list

    - name: Debug ee_list
      when: ee_list.stdout_lines is search(base_ee) and debug == true
      ansible.builtin.debug:
        var: ee_list

    - name: Install the required base EE if not already present
      when: ee_list.stdout_lines is not search(base_ee) and debug == true
      # when: ee_list.stdout_lines is not search(inc_vars.build_arg_defaults.EE_BASE_IMAGE)
      ansible.builtin.debug:
        msg: "Install the missing base EE here"

    # - name: Search containing folder to determine if there are any crt files(used for self-taskned pah server)
    #   ansible.builtin.find:
    #     paths: "{{ path_ee }}/{{ new_ee }}"
    #     patterns: '*.crt'
    #   register: crt_files

    # - name: debug
    #   when: crt_files.matched > 0 and debug == true
    #   ansible.builtin.debug:
    #     var: crt_files

    # - name: Begin the build process on the EE when certs do need to be installed
    #   when: ee_list.stdout_lines is search(base_ee) and crt_files.matched > 0
    #   when: ee_list.stdout_lines is search(inc_vars.build_arg_defaults.EE_BASE_IMAGE)
    #   block:
    #     - name: Run the create on the selected new EE - **install certs process**
    #       ansible.builtin.shell: "ansible-builder create"
    #       args:
    #         chdir: "{{ path_ee }}/{{new_ee}}"
    #       register: ee_build_out
    #       failed_when: ee_build_out.stdout_lines is not search('Complete!')

    #     - name: Copy cert files to the build folder
    #       ansible.builtin.shell: "cp {{ path_ee }}/{{new_ee}}/*.crt {{ path_ee }}/{{new_ee}}/context/_build"
    #       args:
    #         chdir: "{{ path_ee }}/{{new_ee}}"

    #     - name: Add line to Containerfile to ensure the certificates are copied and applied
    #       ansible.builtin.lineinfile:
    #         path: "{{ path_ee }}/{{new_ee}}/context/Containerfile"
    #         insertbefore: '^RUN ansible-galaxy role install.*'
    #         line: 'RUN cp *.crt /etc/pki/ca-trust/source/anchors && update-ca-trust'

    #     - name: Run the build on the selected new EE - with installed certs
    #       ansible.builtin.shell: "podman build -f context/Containerfile -t {{ new_ee }} context"
    #       args:
    #         chdir: "{{ path_ee }}/{{new_ee}}"
    #       register: ee_build_out
    #       failed_when: ee_build_out.stdout_lines is not search('Complete!')

    #     - name: Debug ee_build_out
    #       when: debug == true
    #       ansible.builtin.debug:
    #         var: ee_build_out

    - name: Begin the build process on the EE when no certs need to be installed
      # when: ee_list.stdout_lines is search(base_ee) and crt_files.matched == 0
      # when: ee_list.stdout_lines is search(inc_vars.build_arg_defaults.EE_BASE_IMAGE)
      block:
        - name: Run the build on the selected new EE
          ansible.builtin.shell: "ansible-builder build --tag {{ new_ee }}"
          args:
            chdir: "{{ path_to_ee_inside_repo }}"
          register: ee_build_out
          failed_when: ee_build_out.stdout_lines is not search('Complete!')

        - name: Debug ee_build_out
          when: debug == true
          ansible.builtin.debug:
            var: ee_build_out

    - name: Push EE to container registry with tag 'Version'
      ansible.builtin.shell: "podman push --creds={{ pah_user }}:{{ pah_pass }} localhost/{{ new_ee }}:latest {{ pah_host }}/{{ new_ee }}:{{ new_ee_ver }} --tls-verify=false"
      args:
        chdir: "{{ path_to_ee_inside_repo }}"
      register: pah_push_out
      # failed_when: pah_push_out.stderr_lines is not search('Storing tasknatures')
      failed_when: pah_push_out.stderr_lines is not search('Writing manifest to image destination')
    
    - name: Push EE to container registry with tag 'latest'
      ansible.builtin.command: "podman push --creds={{ pah_user }}:{{ pah_pass }} localhost/{{ new_ee }}:latest {{ pah_host }}/{{ new_ee }}:latest --tls-verify=false"
      args:
        chdir: "{{ path_to_ee_inside_repo }}"
      register: pah_push_out
      # failed_when: pah_push_out.stderr_lines is not search('Storing tasknatures')
      failed_when: pah_push_out.stderr_lines is not search('Writing manifest to image destination')

    - name: Debug pah_push_out
      when: debug == true
      ansible.builtin.debug:
        var: pah_push_out

    - name: Collect credentials
      ansible.builtin.uri:
        url: "https://{{ inventory_hostname }}/api/v2/credentials/"
        user: "{{ controller_user }}"
        password: "{{ controller_pass }}"
        method: GET
        validate_certs: false
        force_basic_auth: true
        status_code:
          - 200
          - 201
          - 204
      changed_when: false
      register: aap_cred_out

    - name: Debug aap_cred_out
      when: debug == true
      ansible.builtin.debug:
        var: aap_cred_out

    - name: Set ansible credential name to ID
      when: item.name == pah_cred
      ansible.builtin.set_fact:
        pah_cred_id: "{{ item.id }}"
      loop: "{{ aap_cred_out.json.results }}"

    - name: Collect EEs to check if it already exists
      ansible.builtin.uri:
        url: "https://{{ inventory_hostname }}/api/v2/execution_environments/"
        user: "{{ controller_user }}"
        password: "{{ controller_pass }}"
        method: GET
        validate_certs: false
        force_basic_auth: true
        status_code:
          - 200
          - 201
          - 204
      changed_when: false
      register: aap_ee_out

    - name: Debug aap_ee_out
      when: debug == true
      ansible.builtin.debug:
        var: aap_ee_out

    - name: Set ansible ee id if name already exists
      when: item.name == new_ee
      ansible.builtin.set_fact:
        new_ee_id: "{{ item.id }}"
      loop: "{{ aap_ee_out.json.results }}"


    - name: Configure AAP for new EE
      when: new_ee_id is undefined
      vars:
        hosts: controllers
      ansible.builtin.uri:
        url: "https://{{ inventory_hostname }}/api/v2/execution_environments/"
        user: "{{ controller_user }}"
        password: "{{ controller_pass }}"
        method: POST
        validate_certs: false
        force_basic_auth: true
        body_format: json
                # "image": "{{ pah_host }}/{{ new_ee }}:{{ new_ee_ver }}",
                # "description": "added by automation",
        body: |
            {
                "name": "{{ new_ee }}",
                "image": "{{ pah_host }}/{{ new_ee }}:latest",
                "pull": "always",
                "credential": "{{ pah_cred_id }}"
            }
        status_code:
          - 200
          - 201
          - 204
      failed_when: aap_conf_out.status != 201 and aap_conf_out.json.name is not search('already exists')
      register: aap_conf_out

    - name: Debug aap_conf_out
      when: debug == true
      ansible.builtin.debug:
        var: aap_conf_out

    - name: If EE already exists on AAP, update version number
      # when: aap_conf_out.status == 400 and aap_conf_out.json.name is search('already exists')
      when: new_ee_id is defined
      vars:
        hosts: controllers
      ansible.builtin.uri:
        url: "https://{{ inventory_hostname }}/api/v2/execution_environments/{{ new_ee_id }}/"
        user: "{{ controller_user }}"
        password: "{{ controller_pass }}"
        method: PUT
        validate_certs: false
        force_basic_auth: true
        body_format: json
                # "image": "{{ pah_host }}/{{ new_ee }}:{{ new_ee_ver }}",
                # "description": "added by automation",
        body: |
            {
                "name": "{{ new_ee }}",
                "image": "{{ pah_host }}/{{ new_ee }}:latest",
                "pull": "always",
                "credential": "{{ pah_cred_id }}"
            }
        status_code:
          - 200
          - 201
          - 204
  #    failed_when: aap_conf_out.status != 201 and aap_conf_out.json.name is not search('already exists')
      register: aap_conf_patch_out
...
